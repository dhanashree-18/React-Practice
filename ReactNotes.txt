HTML file - 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Namaste React</title>
    <link rel="stylesheet" href="./index.css"/>
</head>
<body>
    <div id="root"></div>

    
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

<script src="./App.js"></script>

</body>
</html>


Above the 2 scripts are added which are react CDN links (Content Delivery Network).

1] <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>

- It's a React core library, contains JS code written by FB developers.
- This file contains the logic for defining and managing components, hooks and React reconciliation algorithm.
- Provides APIs for crreating elements (React.createElement) and managing state using useState,useEffect etc.
- does not deal with the React DOM.

2] <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

- It loads React's DOM library companion to React for web specific rendering.
- It provides API to render React components like ReactDOM.createRoot.
- manages the updates to the DOM based on the changes made to props and state within components.
- Targets the browser environment (DOM rendering).

React: Handles the logic and structure of your application.

ReactDOM: Focuses on rendering that logic and structure to the DOM in the browser. 
Both are essential for building and rendering React applications in a web environment.

_____________________________________________________________________________________________________________________________________
App.js file -

const heading = React.createElement("h1", {id:"heading"}, "Hello world from React!" );
    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(heading);
    
    /*
    The '{}' takes the attributes like class or id if we want to give any to that tag. Or we can put it empty.
    for example if we want to give id to h1 tag , then it will be written as -
    const heading = React.createElement("h1", {id : "heading"}, "Hello world from React!" );

    Also,
    The render() method is a method that takes a object (i.e. heading) as a argument 
    and convert it into a tag and put it on a DOM
_____________________________________________________________________________________________________________________________________    
    structure - 
    <div>
        <div>
            <h1></h1>
        </div>
    </div>

    const parent = React.createElement("div",{id:parent}, 
    React.createElement("div",{id:child},
     React.createElement("h1",{"Hi I am heading"})
     )
     );
______________________________________________________________________________________________________________________________________
     Suppose if we want to add multiple tags inside the div tags like -

     <div>
        <div>
            <h1></h1>
            <h2></h2>
        </div>
    </div>

    Then we just add an array of React Elements or childrens - eg-

    const parent= React.createElement("div",{id:parent},
    React.createElement("div",{id:child},
    [React.createElement("h1",{},"I am h1 tag"),
    React.createElement("h2",{},"I am h2 tag"),
    ])
    );

    */